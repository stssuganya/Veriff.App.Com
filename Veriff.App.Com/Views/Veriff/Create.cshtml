@using Veriff.Core.Model
@using Veriff.App.Com.Utilities;
@model verification
@{
    ViewData["Title"] = "Create";
    string apiKey = Utility.GetAppSettings("ApiKey");
    string baseUrl = Utility.GetAppSettings("VeriffApiUrl");
    string secretKey = Utility.GetAppSettings("SecretKey");
}

<script src="~/js/jquery-3.1.1.min.js"></script>
<script src='https://cdn.veriff.me/sdk/js/1.5/veriff.min.js'></script>
<script src='https://cdn.veriff.me/incontext/js/v1/veriff.js'></script>
@*for hash algorithm*@
<script src="https://cdnjs.cloudflare.com/ajax/libs/forge/0.8.2/forge.all.min.js"></script>
<button onclick="getVeriffStatus();">GetVeriffStatus</button>
<div id='veriff-root' style="width:400px">

</div>

<script type="text/javascript">
    var sessionId;
     var apiKey = '@apiKey';
    var baseUrl = '@baseUrl'
    var hashText;
    const veriff = Veriff({
        apiKey: apiKey,
        parentId: 'veriff-root',
        onSession: function (err, response) {
            //assign session Id in variable
            sessionId = response.verification.id;
            // received the response, verification can be started / triggered now

            // incontext sdk
            window.veriffSDK.createVeriffFrame({
                url: response.verification.url,
                onEvent: function (msg, response) {
                    switch (msg) {
                        case 'CANCELED':
                            alert("CANCELED")
                            break;
                        case 'STARTED':
                            alert("STARTED")
                            break;
                        case 'FINISHED':
                            PatchVeriffStatus();
                            getVeriffStatus();
                            alert("FINISHED")
                            break;
                        default:
                            alert(msg.err);
                            break;
                    }

            } });
        }
    });

    veriff.mount();    
    function getVeriffStatus() {
        //base Url with response method(decision) and sessionId
        var Baseurl = '@baseUrl' + '/v1/sessions/' + sessionId + '/decision';

        //create SHA256 hash encryption with secret key
        var hmac = forge.hmac.create();
        hmac.start('sha256', '@secretKey');
        hmac.update(sessionId);
        var hashText = hmac.digest().toHex();

        //get veriff response details
        $.ajax({
            url: Baseurl,
            method: 'GET',
            headers:
            {
                'Content-Type': 'application/json',
                'X-HMAC-SIGNATURE': hashText,
                'X-AUTH-CLIENT': '@apiKey'
            },
            success: function (result) {
                console.log(result)
            }

        });
    }

     function PatchVeriffStatus() {
        //base Url with response method(decision) and sessionId
        var Baseurl = '@baseUrl' + '/v1/sessions/' + sessionId + '/decision';

        //create SHA256 hash encryption with secret key
        var hmac = forge.hmac.create();
        hmac.start('sha256', '@secretKey');
        hmac.update(sessionId);
        var hashText = hmac.digest().toHex();

        //get veriff response details
        $.ajax({
            url: Baseurl,
            method: 'GET',
            headers:
            {
                'Content-Type': 'application/json',
                'X-HMAC-SIGNATURE': hashText,
                'X-AUTH-CLIENT': '@apiKey'
            },
            body:
            {
                verification:
                    { status: 'submitted' }
            },
            success: function (result) {
                console.log(result)
            }

        });
    }

</script>